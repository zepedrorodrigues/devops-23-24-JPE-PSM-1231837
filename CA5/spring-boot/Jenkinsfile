pipeline {
   agent any

   environment{
    DOCKER_IMAGE = 'ozepedrorodrigues/jenkins-with-docker'
    DOCKER_REGISTRY = 'https://index.docker.io/v1/'
    DOCKER_CREDENTIALS_ID = 'dockerHubCredentials'
   }

   stages {
      stage('Checkout') {
         steps {
            git url: 'https://github.com/zepedrorodrigues/devops-23-24-JPE-PSM-1231837.git', branch: 'master'
         }
      }
      stage('Create Dockerfile') {
         steps {
            dir('CA2/Part2/demo') {
               echo 'Creating Dockerfile...'
               script {
                  writeFile file: 'Dockerfile', text: '''
                        # Use the official OpenJDK image as a parent image
                        FROM openjdk:17-jdk-alpine

                        # Set the working directory in the container
                        WORKDIR /app

                        # Copy the WAR file from the host to the container
                        COPY build/libs/*.war app.war

                        # Expose the port that the application will run on
                        EXPOSE 8080

                        # Run the WAR file
                        ENTRYPOINT ["java", "-jar", "app.war"]
                        '''
               }
            }
         }
      }
      stage('Assemble') {
         steps {
            dir('CA2/Part2/demo') {
               sh 'chmod +x ./gradlew'
               sh './gradlew assemble'
            }
         }
      }
      stage('Test') {
         steps {
            dir('CA2/Part2/demo') {
               sh 'chmod +x ./gradlew'
               sh './gradlew test'
            }
            junit '**/build/test-results/test/*.xml'
         }
      }
      stage('Javadoc') {
         steps {
            dir('CA2/Part2/demo') {
               sh './gradlew javadoc'
               publishHTML(target: [
                       reportDir: 'build/docs/javadoc',
                       reportFiles: 'index.html',
                       reportName: 'Javadoc',
                       keepAll: true,
                       alwaysLinkToLastBuild: true,
                       allowMissing: false
               ])
            }
         }
      }
      stage('Archive') {
         steps {
            archiveArtifacts artifacts: 'CA2/Part2/demo/build/libs/*.war', allowEmptyArchive: true
         }
      }
      stage('PublishImage') {
         steps {
            dir('CA2/Part2/demo') {
            script {
               echo 'Building Docker Image...'
               sh 'docker info'
               def app = docker.build("${env.DOCKER_IMAGE}:${env.BUILD_ID}", '.')
               docker.withRegistry(env.DOCKER_REGISTRY, env.DOCKER_CREDENTIALS_ID) {
                  app.push()
               }
            }
         }
      }
   }}
}